// Vertex shader
const vertexShaderSource = `
attribute vec3 vertex;
attribute vec3 normal;
attribute vec2 textureCoord;
uniform mat4 ModelViewProjectionMatrix, normalMat;
varying vec3 normalInterp;
varying vec3 vertPos;
uniform vec2 scalePoint;
uniform float fScale;
varying vec2 texInter;

mat4 scale(float value) {
  mat4 scaleMatrix;

  for(int i = 0; i < 4;i++)  {
    for(int j = 0; j < 4;j++) {
      if(i != j) {
        scaleMatrix[i][j] = 0.0;
      } else {
        scaleMatrix[i][j] = value;
      }
    }
  }
  scaleMatrix[3][3] = 1.0;
  return scaleMatrix;
}

void main() {
   mat4 scale = scale(fScale);
    vec4 vertPos4 = ModelViewProjectionMatrix * vec4(vertex, 1.0);
    vertPos = vec3(vertPos4) / vertPos4.w;
    normalInterp = vec3(normalMat * vec4(normal, 0.0));

    vec4 texCoordTranslated = vec4(textureCoord -scalePoint ,0.0,0.0);
    vec4 texCoordScaled = texCoordTranslated * scale;
    vec4 texCoordTranslatedToBack = texCoordScaled + vec4(scalePoint ,0.0,0.0);

    texInter = texCoordTranslatedToBack.xy;
    gl_Position = vertPos4;
}`;

// Fragment shader
const fragmentShaderSource = `
#ifdef GL_FRAGMENT_PRECISION_HIGH
   precision highp float;
#else
   precision mediump float;
#endif

varying vec4 color;
precision mediump float;
varying vec3 normalInterp;  // Surface normal
varying vec3 vertPos;       // Vertex position
uniform float ambientCoefficient;   // Ambient reflection coefficient
uniform float diffuseCoefficient;   // Diffuse reflection coefficient
uniform float specularCoefficient;   // Specular reflection coefficient
uniform float shininess; // Shininess
uniform vec3 ambientColor;
uniform vec3 diffuseColor;
uniform vec3 specularColor;
uniform vec3 lightPosition;
uniform sampler2D sampler;
varying vec2 texInter;

void main() {
  vec3 vNormal = normalize(normalInterp);
  vec3 light = normalize(lightPosition - vertPos);

  float dotProduct = max(dot(vNormal, light), 0.0);
  float specular = 0.0;

  if(dotProduct > 0.0) {
    vec3 reflect = reflect(-light, vNormal);
    vec3 n_vertPos = normalize(-vertPos);
    float specAngle = max(dot(reflect, n_vertPos), 0.0);
    specular = pow(specAngle, shininess);
  }

  vec4 lightColor = vec4(ambientCoefficient * ambientColor
                  + diffuseCoefficient * dotProduct * diffuseColor
                  + specularCoefficient * specular * specularColor, 1.0);
  vec4 texture = texture2D(sampler, texInter);
  gl_FragColor = texture * lightColor;

}`;